---
import Layout from '@/layouts/Layout.astro';
import AlertBanner from '@/components/AlertBanner.astro';
---

<Layout title="Upload Facebook Data - Marketing Dashboard">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Upload Facebook Ads Data</h1>
      <p class="text-gray-600">Upload CSV files exported from Facebook Ads Manager to track CPA performance</p>
    </div>

    <!-- Instructions -->
    <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8">
      <h3 class="text-lg font-medium text-blue-900 mb-4 flex items-center">
        <span class="mr-2">ℹ️</span>
        How to Export Facebook Ads Data
      </h3>
      <div class="space-y-3 text-sm text-blue-800">
        <div class="flex items-start">
          <span class="font-medium mr-2">1.</span>
          <span>Go to <a href="https://business.facebook.com/adsmanager" target="_blank" class="underline">Facebook Ads Manager</a></span>
        </div>
        <div class="flex items-start">
          <span class="font-medium mr-2">2.</span>
          <span>Click "Ad Sets" tab and set date range to "Yesterday"</span>
        </div>
        <div class="flex items-start">
          <span class="font-medium mr-2">3.</span>
          <span>Sort by "Amount Spent" (descending) to see top performing ad sets</span>
        </div>
        <div class="flex items-start">
          <span class="font-medium mr-2">4.</span>
          <span>Click "Export" → "Export Table Data" → "CSV"</span>
        </div>
        <div class="flex items-start">
          <span class="font-medium mr-2">5.</span>
          <span>Ensure these columns are included: Ad Set Name, Amount Spent, Results, Cost per Result, Impressions, Link Clicks</span>
        </div>
      </div>
    </div>

    <!-- Upload Form -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Upload CSV File</h3>
      
      <form id="upload-form" class="space-y-6">
        <!-- File Upload -->
        <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-gray-400 transition-colors">
          <div class="text-center">
            <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
              <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
            <div class="mt-4">
              <label for="file-upload" class="cursor-pointer">
                <span class="mt-2 block text-sm font-medium text-gray-900">
                  Click to upload Facebook Ads CSV
                </span>
                <span class="mt-1 block text-sm text-gray-500">
                  or drag and drop your file here
                </span>
              </label>
              <input 
                id="file-upload" 
                name="file-upload" 
                type="file" 
                accept=".csv"
                class="sr-only"
                required
              />
            </div>
            <p class="mt-2 text-xs text-gray-500">
              CSV files only, max 10MB
            </p>
          </div>
        </div>

        <!-- File Info Display -->
        <div id="file-info" class="hidden bg-gray-50 rounded-lg p-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center">
              <svg class="h-5 w-5 text-green-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <div>
                <p class="text-sm font-medium text-gray-900" id="file-name"></p>
                <p class="text-xs text-gray-500" id="file-size"></p>
              </div>
            </div>
            <button type="button" id="remove-file" class="text-red-600 hover:text-red-800 text-sm">
              Remove
            </button>
          </div>
        </div>

        <!-- Date Range -->
        <div>
          <label for="date-range" class="block text-sm font-medium text-gray-700 mb-2">
            Data Date Range
          </label>
          <select 
            id="date-range" 
            name="date-range" 
            class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
          >
            <option value="yesterday">Yesterday</option>
            <option value="last-7-days">Last 7 Days</option>
            <option value="last-30-days">Last 30 Days</option>
            <option value="custom">Custom Range</option>
          </select>
        </div>

        <!-- Processing Options -->
        <div class="space-y-4">
          <div class="flex items-center">
            <input 
              id="validate-data" 
              name="validate-data" 
              type="checkbox" 
              checked
              class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label for="validate-data" class="ml-2 block text-sm text-gray-900">
              Validate data quality (recommended)
            </label>
          </div>
          
          <div class="flex items-center">
            <input 
              id="calculate-rolling-cpa" 
              name="calculate-rolling-cpa" 
              type="checkbox" 
              checked
              class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label for="calculate-rolling-cpa" class="ml-2 block text-sm text-gray-900">
              Calculate 7-day rolling CPA averages
            </label>
          </div>
        </div>

        <!-- Submit Button -->
        <div>
          <button 
            type="submit" 
            id="submit-btn"
            class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            disabled
          >
            <span id="submit-text">Select a file to upload</span>
            <svg id="loading-spinner" class="hidden animate-spin ml-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </button>
        </div>
      </form>
    </div>

    <!-- Processing Results -->
    <div id="results-section" class="hidden">
      <div id="alerts-container" class="space-y-4 mb-6"></div>
      
      <div id="results-summary" class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Upload Results</h3>
        <div id="results-content" class="space-y-3"></div>
      </div>
    </div>

    <!-- Recent Uploads -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Recent Uploads</h3>
      <div id="recent-uploads" class="space-y-3">
        <div class="text-center py-8 text-gray-500">
          <p>No uploads yet. Upload your first Facebook CSV file above.</p>
        </div>
      </div>
    </div>
  </div>

  <script>
    // File upload handling
    const fileInput = document.getElementById('file-upload');
    const fileInfo = document.getElementById('file-info');
    const fileName = document.getElementById('file-name');
    const fileSize = document.getElementById('file-size');
    const removeFileBtn = document.getElementById('remove-file');
    const submitBtn = document.getElementById('submit-btn');
    const submitText = document.getElementById('submit-text');
    const loadingSpinner = document.getElementById('loading-spinner');
    const form = document.getElementById('upload-form');
    const resultsSection = document.getElementById('results-section');
    const alertsContainer = document.getElementById('alerts-container');
    const resultsContent = document.getElementById('results-content');

    // Drag and drop handling
    const uploadArea = fileInput.closest('.border-dashed');
    
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      uploadArea.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
      uploadArea.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      uploadArea.addEventListener(eventName, unhighlight, false);
    });

    function highlight() {
      uploadArea.classList.add('border-primary-400', 'bg-primary-50');
    }

    function unhighlight() {
      uploadArea.classList.remove('border-primary-400', 'bg-primary-50');
    }

    uploadArea.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      
      if (files.length > 0) {
        fileInput.files = files;
        handleFileSelect();
      }
    }

    // File selection handling
    fileInput.addEventListener('change', handleFileSelect);

    function handleFileSelect() {
      const file = fileInput.files[0];
      
      if (file) {
        // Validate file type
        if (!file.name.toLowerCase().endsWith('.csv')) {
          showAlert('error', 'Invalid file type. Please select a CSV file.');
          return;
        }

        // Validate file size (10MB max)
        if (file.size > 10 * 1024 * 1024) {
          showAlert('error', 'File too large. Maximum size is 10MB.');
          return;
        }

        // Display file info
        fileName.textContent = file.name;
        fileSize.textContent = `${(file.size / 1024).toFixed(1)} KB`;
        fileInfo.classList.remove('hidden');
        
        // Enable submit button
        submitBtn.disabled = false;
        submitText.textContent = 'Process Facebook Data';
      }
    }

    // Remove file
    removeFileBtn.addEventListener('click', () => {
      fileInput.value = '';
      fileInfo.classList.add('hidden');
      submitBtn.disabled = true;
      submitText.textContent = 'Select a file to upload';
      clearResults();
    });

    // Form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const file = fileInput.files[0];
      if (!file) return;

      // Show loading state
      submitBtn.disabled = true;
      submitText.textContent = 'Processing...';
      loadingSpinner.classList.remove('hidden');
      clearResults();

      try {
        // Simulate file processing (in real app, this would be an API call)
        await processCSVFile(file);
      } catch (error) {
        showAlert('error', `Processing failed: ${error.message}`);
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        submitText.textContent = 'Process Facebook Data';
        loadingSpinner.classList.add('hidden');
      }
    });

    async function processCSVFile(file) {
      // Simulate processing delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Read and validate CSV
      const text = await file.text();
      const lines = text.trim().split('\n');
      
      if (lines.length < 2) {
        throw new Error('CSV file appears to be empty or invalid');
      }

      // Validate required columns
      const headers = lines[0].toLowerCase();
      const requiredColumns = ['ad set name', 'amount spent', 'results', 'cost per result'];
      const missingColumns = requiredColumns.filter(col => !headers.includes(col));
      
      if (missingColumns.length > 0) {
        throw new Error(`Missing required columns: ${missingColumns.join(', ')}`);
      }

      // Process data
      const dataRows = lines.slice(1).filter(line => line.trim());
      const processedRecords = dataRows.length;
      
      // Calculate summary metrics
      const totalSpend = Math.random() * 5000 + 1000; // Simulated
      const totalConversions = Math.floor(Math.random() * 100 + 20);
      const averageCPA = totalSpend / totalConversions;

      // Show success
      showAlert('success', `Successfully processed ${processedRecords} ad sets from Facebook data`);
      
      // Display results
      showResults({
        fileName: file.name,
        recordsProcessed: processedRecords,
        totalSpend: totalSpend,
        totalConversions: totalConversions,
        averageCPA: averageCPA,
        uploadTime: new Date().toISOString()
      });

      // Add to recent uploads
      addToRecentUploads({
        fileName: file.name,
        recordsProcessed: processedRecords,
        uploadTime: new Date().toLocaleString(),
        status: 'success'
      });
    }

    function showAlert(type, message) {
      const alertHTML = `
        <div class="bg-${type === 'error' ? 'red' : 'green'}-50 border border-${type === 'error' ? 'red' : 'green'}-200 text-${type === 'error' ? 'red' : 'green'}-800 rounded-lg p-4 animate-fade-in">
          <div class="flex items-start">
            <span class="text-lg mr-2">${type === 'error' ? '❌' : '✅'}</span>
            <span class="text-sm">${message}</span>
          </div>
        </div>
      `;
      
      alertsContainer.innerHTML = alertHTML;
      resultsSection.classList.remove('hidden');
      
      // Auto-remove after 5 seconds for success messages
      if (type === 'success') {
        setTimeout(() => {
          alertsContainer.innerHTML = '';
        }, 5000);
      }
    }

    function showResults(data) {
      const resultsHTML = `
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="text-center">
            <div class="text-2xl font-bold text-gray-900">${data.recordsProcessed}</div>
            <div class="text-sm text-gray-500">Ad Sets Processed</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-gray-900">$${data.totalSpend.toFixed(2)}</div>
            <div class="text-sm text-gray-500">Total Spend</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-gray-900">$${data.averageCPA.toFixed(2)}</div>
            <div class="text-sm text-gray-500">Average CPA</div>
          </div>
        </div>
        <div class="mt-4 pt-4 border-t border-gray-200">
          <p class="text-sm text-gray-600">
            Data has been processed and is now available in the 
            <a href="/" class="text-primary-600 hover:text-primary-700 font-medium">dashboard</a>.
          </p>
        </div>
      `;
      
      resultsContent.innerHTML = resultsHTML;
      resultsSection.classList.remove('hidden');
    }

    function addToRecentUploads(upload) {
      const recentUploads = document.getElementById('recent-uploads');
      
      // Remove empty state
      const emptyState = recentUploads.querySelector('.text-center');
      if (emptyState) {
        emptyState.remove();
      }
      
      const uploadHTML = `
        <div class="flex items-center justify-between py-3 px-4 border border-gray-200 rounded-lg">
          <div class="flex items-center">
            <span class="text-green-500 mr-3">✅</span>
            <div>
              <p class="text-sm font-medium text-gray-900">${upload.fileName}</p>
              <p class="text-xs text-gray-500">${upload.recordsProcessed} records • ${upload.uploadTime}</p>
            </div>
          </div>
          <span class="text-xs text-green-600 bg-green-100 px-2 py-1 rounded-full">
            Processed
          </span>
        </div>
      `;
      
      recentUploads.insertAdjacentHTML('afterbegin', uploadHTML);
    }

    function clearResults() {
      alertsContainer.innerHTML = '';
      resultsSection.classList.add('hidden');
    }
  </script>
</Layout>